package main

import (
	"context"
	"log"
	"strconv"
	"time"

	db "todolist_bot/mongodb"
	"todolist_bot/tasks"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// func sendWithKeyboard(bot *tgbotapi.BotAPI, chatID int64, text string) {
// 	keyboard := tgbotapi.NewReplyKeyboard(
// 		tgbotapi.NewKeyboardButtonRow(
// 			tgbotapi.NewKeyboardButton("/add"),
// 			tgbotapi.NewKeyboardButton("/list"),
// 		),
// 		tgbotapi.NewKeyboardButtonRow(
// 			tgbotapi.NewKeyboardButton("/done"),
// 			tgbotapi.NewKeyboardButton("/delete"),
// 		),
// 	)

// 	msg := tgbotapi.NewMessage(chatID, text)
// 	msg.ReplyMarkup = keyboard
// 	bot.Send(msg)
// }

func sendWithInlineButtons(bot *tgbotapi.BotAPI, chatID int64, text string) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "add"),
			tgbotapi.NewInlineKeyboardButtonData("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "list"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", "done"),
			tgbotapi.NewInlineKeyboardButtonData("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "delete"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func main() {
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
	client := db.Connect("mongodb+srv://angelinali1310:RRMg8Fxl9uIo2mp6@todolistbotgo.hz0tmef.mongodb.net/?retryWrites=true&w=majority&appName=todolistbotgo")
	collection := client.Database("todolistbotgo").Collection("tasks") // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç tasks

	taskService := tasks.NewTaskService(collection)

	bot, err := tgbotapi.NewBotAPI("7650724062:AAFgaH0xtdW_rlgGtMqPduehkOb9E7R3_Hs")
	if err != nil { // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
		log.Panic(err)
	}

	// –£–¥–∞–ª—è–µ–º webhook, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling
	_, err = bot.Request(tgbotapi.DeleteWebhookConfig{})
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: %v", err)
	}
	log.Println("Webhook —É–¥–∞–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u) // –ø–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª

	awaiting := make(map[int64]string) // "add", "delete" –∏–ª–∏ ""

	for update := range updates { // —á–∏—Ç–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ–∫–∞ –æ–Ω –Ω–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è
		// 1) –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline-–∫–Ω–æ–ø–∫–∏
		if update.CallbackQuery != nil {
			chatID := update.CallbackQuery.Message.Chat.ID
			data := update.CallbackQuery.Data // "add", "list", "done", "delete"

			// –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ¬´–æ—Ç–≤–µ—á–∞–µ–º¬ª –Ω–∞ Callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã
			bot.Request(tgbotapi.NewCallback(update.CallbackQuery.ID, ""))
			switch data {
			case "add":
				awaiting[chatID] = "add"
				send(bot, chatID, "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É:")
			case "list":
				ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
				tasks, err := taskService.ListTasks(ctx, chatID)
				cancel()
				if err != nil {
					send(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
					continue
				}
				if len(tasks) == 0 {
					send(bot, chatID, "üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
				} else {
					var msg string = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
					for i, t := range tasks {
						status := "‚ùå"
						if t.IsDone {
							status = "‚úÖ"
						}
						msg += strconv.Itoa(i+1) + ". " + t.Text + " " + status + "\n"
					}
					send(bot, chatID, msg)
				}
				sendWithInlineButtons(bot, chatID, "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
			case "done":
				awaiting[chatID] = "done"
				send(bot, chatID, "‚òëÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏:")
			case "delete":
				awaiting[chatID] = "delete"
				send(bot, chatID, "‚ùì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
			default:
				sendWithInlineButtons(bot, chatID, "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
			}

			// –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —á—Ç–µ–Ω–∏—é –∫–∞–Ω–∞–ª–∞
			continue
		}

		// 2) –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		text := update.Message.Text

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π ‚Äî –ø–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å—Ä–∞–∑—É
		if _, ok := awaiting[chatID]; !ok {
			awaiting[chatID] = "" // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º

			ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
			tasks, err := taskService.ListTasks(ctx, chatID)
			cancel()

			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:", err)
				send(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
			} else if len(tasks) == 0 {
				send(bot, chatID, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
			} else {
				msg := "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
				for i, t := range tasks {
					status := "‚ùå"
					if t.IsDone {
						status = "‚úÖ"
					}
					msg += strconv.Itoa(i+1) + ". " + t.Text + " " + status + "\n"
				}
				send(bot, chatID, msg)
			}
			sendWithInlineButtons(bot, chatID, "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
		}

		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)

		switch awaiting[chatID] {
		case "add":
			err := taskService.AddTask(ctx, chatID, text)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", err)
				send(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
			} else {
				send(bot, chatID, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: "+text)
			}
			awaiting[chatID] = ""
			sendWithInlineButtons(bot, chatID, "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")

			cancel()
			continue
		case "done":
			tasks, err := taskService.ListTasks(ctx, chatID)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ done", err)
			}
			index, err := strconv.Atoi(text)
			if err != nil || index <= 0 || index > len(tasks) {
				send(bot, chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
			} else {
				taskToUpdate := tasks[index-1]
				err = taskService.MarkTaskDone(ctx, taskToUpdate.ID)
				if err != nil {
					// handle error
				} else {
					send(bot, chatID, "üéâ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
				}
				sendWithInlineButtons(bot, chatID, "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
			}
			awaiting[chatID] = ""
			continue
		case "delete":
			tasks, err := taskService.ListTasks(ctx, chatID)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ delete", err)
			}
			index, err := strconv.Atoi(text)
			if err != nil || index <= 0 || index > len(tasks) {
				send(bot, chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
			} else {
				taskTRemoved := tasks[index-1]
				err = taskService.RemoveTask(ctx, taskTRemoved.ID)
				if err != nil {
					// handle error
				} else {
					send(bot, chatID, "üóë –£–¥–∞–ª–µ–Ω–∞: "+taskTRemoved.Text)
				}
				sendWithInlineButtons(bot, chatID, "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
			}
			awaiting[chatID] = ""
			continue
		}

		cancel()

		// switch text {
		// case "/add":
		// 	awaiting[chatID] = "add"
		// 	send(bot, chatID, "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É:")
		// case "/list":
		// 	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		// 	tasks, err := taskService.ListTasks(ctx, chatID)
		// 	cancel()
		// 	if err != nil {
		// 		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:", err)
		// 		send(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
		// 		continue
		// 	}
		// 	if len(tasks) == 0 {
		// 		send(bot, chatID, "üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
		// 	} else {
		// 		msg := "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
		// 		for i, t := range tasks {
		// 			status := "‚ùå"
		// 			if t.IsDone {
		// 				status = "‚úÖ"
		// 			}
		// 			msg += strconv.Itoa(i+1) + ". " + t.Text + " " + status + "\n"
		// 		}
		// 		send(bot, chatID, msg)
		// 		sendWithInlineButtons(bot, chatID, "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
		// 	}
		// case "/done":
		// 	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		// 	tasks, err := taskService.ListTasks(ctx, chatID)
		// 	cancel()
		// 	if err != nil {
		// 		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ /done:", err)
		// 		send(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ /done.")
		// 		continue
		// 	}
		// 	if len(tasks) == 0 {
		// 		send(bot, chatID, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
		// 	} else {
		// 		awaiting[chatID] = "done"
		// 		send(bot, chatID, "‚òëÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏:")
		// 	}
		// case "/delete":
		// 	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		// 	tasks, err := taskService.ListTasks(ctx, chatID)
		// 	cancel()
		// 	if err != nil {
		// 		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ /delete:", err)
		// 		send(bot, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ /delete.")
		// 		continue
		// 	}
		// 	if len(tasks) == 0 {
		// 		send(bot, chatID, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
		// 	} else {
		// 		awaiting[chatID] = "delete"
		// 		send(bot, chatID, "‚ùì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
		// 	}
		// default:
		// 	sendWithInlineButtons(bot, chatID, "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
		// }
	}
}

func send(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}
